================================================================================
                           SNAPCHEF PROJECT DOCUMENTATION
                    Real-Time Recipe Search System with AI Integration
================================================================================

TABLE OF CONTENTS:
1. Project Overview
2. Architecture & Technologies
3. System Components
4. Data Flow & Workflow
5. API Endpoints
6. Frontend Components
7. Backend Services
8. Database & Caching
9. Docker Configuration
10. Deployment & Usage
11. Key Features
12. Future Enhancements

================================================================================
1. PROJECT OVERVIEW
================================================================================

SnapChef is a real-time recipe search system that uses AI and machine learning
to provide users with detailed recipe information from multiple Indian cooking
websites. The system combines web scraping, semantic search, and RAG (Retrieval
Augmented Generation) to deliver accurate and comprehensive recipe results.

Key Objectives:
- Real-time recipe search across multiple sources
- AI-powered semantic search and content generation
- Dockerized microservices architecture
- Fast and responsive user interface
- Comprehensive recipe details with ingredients, steps, and tips

================================================================================
2. ARCHITECTURE & TECHNOLOGIES
================================================================================

TECHNOLOGY STACK:

Backend:
- Python 3.11
- FastAPI (REST API framework)
- Uvicorn (ASGI server)
- Sentence Transformers (semantic embeddings)
- Hugging Face API (LLM integration)
- Elasticsearch (search engine)
- Redis (caching layer)
- BeautifulSoup4 & Selenium (web scraping)

Frontend:
- React 18
- React Query (data fetching)
- React Context (state management)
- Lucide React (icons)
- React Hot Toast (notifications)
- CSS3 (styling)

Infrastructure:
- Docker & Docker Compose
- Multi-container architecture
- Volume mounting for development
- Health checks and monitoring

Data Processing:
- Pathway (real-time data pipeline)
- Web scraping from multiple sources
- Data indexing and search
- Caching and session management

================================================================================
3. SYSTEM COMPONENTS
================================================================================

CONTAINER ARCHITECTURE:

1. snapchef-backend (Port 8000)
   - FastAPI application
   - Recipe search API
   - RAG service integration
   - Web scraping services
   - Data processing and indexing

2. snapchef-frontend (Port 3000)
   - React application
   - User interface
   - Search functionality
   - Recipe display components
   - Image upload interface

3. pathway-pipeline
   - Real-time data processing
   - Recipe data ingestion
   - Data transformation
   - Pipeline monitoring

4. redis (Port 6379)
   - Caching layer
   - Session storage
   - Popular recipes tracking
   - Search result caching

5. elasticsearch (Port 9200)
   - Search engine
   - Recipe indexing
   - Semantic search
   - Data storage

================================================================================
4. DATA FLOW & WORKFLOW
================================================================================

SEARCH WORKFLOW:

1. USER INPUT
   ├── User enters dish name in frontend
   ├── Search request sent to backend API
   └── Input validation and sanitization

2. BACKEND PROCESSING
   ├── Check Redis cache for existing results
   ├── If cache miss:
   │   ├── Initialize RAG service
   │   ├── Generate embeddings for search query
   │   ├── Search Elasticsearch for similar recipes
   │   ├── Retrieve relevant recipe documents
   │   ├── Generate enhanced recipe details using LLM
   │   └── Cache results in Redis
   └── Return formatted results to frontend

3. FRONTEND DISPLAY
   ├── Receive search results
   ├── Update React Context state
   ├── Render recipe details in three-column layout:
   │   ├── Left: Ingredients list
   │   ├── Middle: Recipe steps + cooking tips
   │   └── Right: Recipe links + nutritional info
   └── Display recipe cards with metadata

4. DATA PERSISTENCE
   ├── Update popular recipes in Redis
   ├── Increment search statistics
   ├── Log search queries for analytics
   └── Maintain cache for future searches

================================================================================
SYSTEM ARCHITECTURE FLOWCHART
================================================================================

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   USER BROWSER  │    │  REACT FRONTEND │    │  FASTAPI BACKEND│
│                 │    │   (Port 3000)   │    │   (Port 8000)   │
└─────────┬───────┘    └─────────┬───────┘    └─────────┬───────┘
          │                      │                      │
          │ 1. Search Request    │                      │
          ├─────────────────────►│                      │
          │                      │ 2. API Call          │
          │                      ├─────────────────────►│
          │                      │                      │
          │                      │                      │ 3. Check Cache
          │                      │                      ├─────────────┐
          │                      │                      │             │
          │                      │                      │ 4. RAG Service
          │                      │                      ├─────────────┤
          │                      │                      │             │
          │                      │                      │ 5. Elasticsearch
          │                      │                      ├─────────────┤
          │                      │                      │             │
          │                      │                      │ 6. Hugging Face
          │                      │                      ├─────────────┤
          │                      │                      │             │
          │                      │ 7. Search Results    │             │
          │                      │◄─────────────────────┤             │
          │                      │                      │             │
          │ 8. Display Results   │                      │             │
          │◄─────────────────────┤                      │             │
          │                      │                      │             │
          │                      │                      │             │
┌─────────┴───────┐    ┌─────────┴───────┐    ┌─────────┴───────┐
│   USER SEES     │    │  THREE-COLUMN   │    │  CACHED IN      │
│  RECIPE DETAILS │    │  LAYOUT DISPLAY │    │    REDIS        │
└─────────────────┘    └─────────────────┘    └─────────────────┘

SUPPORTING SERVICES:
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│      REDIS      │    │  ELASTICSEARCH  │    │ PATHWAY PIPELINE│
│   (Port 6379)   │    │   (Port 9200)   │    │                 │
│                 │    │                 │    │                 │
│ • Cache Results │    │ • Recipe Index  │    │ • Data Ingestion│
│ • Popular Recipes│    │ • Vector Search│    │ • Real-time Proc│
│ • Session Data  │    │ • Similarity    │    │ • Data Transform│
│ • Statistics    │    │ • Full-text     │    │ • Monitoring    │
└─────────────────┘    └─────────────────┘    └─────────────────┘

DATA FLOW SEQUENCE:
1. User enters search query in React frontend
2. Frontend sends POST request to FastAPI backend
3. Backend checks Redis cache for existing results
4. If cache miss, backend initializes RAG service
5. RAG service generates embeddings for search query
6. Elasticsearch performs semantic search on recipe index
7. Relevant recipe documents are retrieved
8. Hugging Face LLM generates enhanced recipe details
9. Results are cached in Redis for future requests
10. Formatted results are returned to frontend
11. React Context updates with new search results
12. Frontend renders three-column recipe layout
13. User sees detailed recipe information with ingredients, steps, and links

================================================================================
5. API ENDPOINTS
================================================================================

BACKEND API (http://localhost:8000):

GET /health
- Health check endpoint
- Returns service status
- Used for container health monitoring

POST /search
- Main recipe search endpoint
- Request: {"dish_name": "biryani"}
- Response: Recipe search results with details
- Includes ingredients, steps, tips, and links

GET /recipes/popular
- Returns popular recipes from cache
- Based on search frequency
- Includes search counts and timestamps

POST /recipes/refresh
- Triggers data refresh from sources
- Updates recipe database
- Re-indexes search data

GET /stats
- System statistics endpoint
- Returns search counts, cache hit rates
- Performance metrics and health data

================================================================================
6. FRONTEND COMPONENTS
================================================================================

COMPONENT ARCHITECTURE:

App.js
├── SearchProvider (Context)
├── Header
├── SearchSection
├── ImageUpload
├── FetchedRecipes
└── Footer

SearchSection.js
- Recipe search input form
- Handles search submission
- Manages loading states
- Integrates with SearchContext

FetchedRecipes.js
- Displays search results
- Three-column layout for recipe details
- Handles empty states
- Shows ingredients, steps, and links

ImageUpload.js
- Static image upload interface
- Drag-and-drop functionality
- File validation
- Demo for future AI integration

SearchContext.js
- React Context for state management
- Manages search results globally
- Handles loading states
- Provides data to all components

================================================================================
7. BACKEND SERVICES
================================================================================

SERVICE LAYER:

RecipeSearchService
- Main search orchestration
- RAG service integration
- Cache management
- Result formatting

RAGService
- Semantic search implementation
- Hugging Face API integration
- Document retrieval
- LLM-based content generation

WebScrapingService
- Multi-source recipe scraping
- Data extraction and cleaning
- Source-specific scrapers
- Rate limiting and error handling

DataIndexingService
- Elasticsearch integration
- Recipe data indexing
- Search query processing
- Analytics and statistics

SCRAPER MODULES:
- HebbarsKitchenScraper
- ArchanasKitchenScraper
- IndianHealthyRecipesScraper
- Base scraper with common functionality

================================================================================
8. DATABASE & CACHING
================================================================================

REDIS CACHE:
- Search result caching (TTL: 1 hour)
- Popular recipes tracking
- Session management
- Search statistics
- Cache hit/miss tracking

ELASTICSEARCH:
- Recipe document storage
- Semantic search indexing
- Vector embeddings storage
- Full-text search capabilities
- Similarity scoring

DATA MODELS:
- RecipeResult: Complete recipe information
- RecipeSearchRequest: Search parameters
- RecipeSearchResponse: Formatted results
- PopularRecipe: Trending recipes
- SystemStats: Performance metrics

================================================================================
9. DOCKER CONFIGURATION
================================================================================

DOCKER COMPOSE SETUP:

Services:
- snapchef-backend: Python FastAPI application
- snapchef-frontend: React application with Nginx
- pathway-pipeline: Real-time data processing
- redis: Caching and session storage
- elasticsearch: Search engine

Networks:
- snapchef-network: Bridge network for inter-service communication

Volumes:
- redis_data: Persistent Redis storage
- es_data: Persistent Elasticsearch storage
- Application code: Volume mounted for development

Health Checks:
- Backend: HTTP health endpoint
- Frontend: Nginx status
- Redis: Connection test
- Elasticsearch: Cluster health

================================================================================
10. DEPLOYMENT & USAGE
================================================================================

LOCAL DEVELOPMENT:

1. Prerequisites:
   - Docker and Docker Compose
   - Git
   - Modern web browser

2. Setup:
   - Clone repository
   - Copy .env.example to .env
   - Add Hugging Face API key
   - Run: docker-compose up -d

3. Access:
   - Frontend: http://localhost:3000
   - Backend API: http://localhost:8000
   - Elasticsearch: http://localhost:9200
   - Redis: localhost:6379

4. Usage:
   - Open browser to http://localhost:3000
   - Search for dishes (e.g., "biryani", "dal", "paneer")
   - View detailed recipe information
   - Click recipe links for full instructions

PRODUCTION DEPLOYMENT:
- Use production Docker images
- Configure environment variables
- Set up reverse proxy (Nginx)
- Enable SSL/TLS certificates
- Configure monitoring and logging

================================================================================
11. KEY FEATURES
================================================================================

CORE FUNCTIONALITY:

1. Real-Time Search
   - Instant recipe search across multiple sources
   - Semantic similarity matching
   - Fast response times (< 1 second)

2. AI-Powered Results
   - RAG-based content generation
   - Enhanced recipe details
   - Intelligent ingredient suggestions
   - Cooking tips and techniques

3. Comprehensive Recipe Display
   - Three-column layout for easy reading
   - Complete ingredient lists
   - Step-by-step instructions
   - Cooking tips and nutritional info
   - Working recipe links

4. Multi-Source Integration
   - Hebbar's Kitchen
   - Archana's Kitchen
   - Indian Healthy Recipes
   - Extensible for additional sources

5. Caching & Performance
   - Redis-based result caching
   - Popular recipe tracking
   - Optimized search queries
   - Fast data retrieval

6. User Experience
   - Clean, modern interface
   - Responsive design
   - Loading states and feedback
   - Error handling and fallbacks

================================================================================
12. FUTURE ENHANCEMENTS
================================================================================

PLANNED IMPROVEMENTS:

1. AI Food Recognition
   - Image upload and analysis
   - CNN-based food detection
   - Automatic recipe suggestions
   - Visual recipe matching

2. Advanced Search Features
   - Filter by cuisine type
   - Dietary restrictions (vegetarian, vegan)
   - Cooking time and difficulty
   - Ingredient-based search

3. User Personalization
   - User accounts and preferences
   - Favorite recipes
   - Search history
   - Personalized recommendations

4. Enhanced Data Sources
   - More recipe websites
   - Restaurant menu integration
   - User-generated content
   - Community recipe sharing

5. Mobile Application
   - React Native mobile app
   - Offline recipe storage
   - Shopping list generation
   - Cooking timer integration

6. Analytics & Insights
   - Recipe popularity tracking
   - User behavior analysis
   - Search trend analysis
   - Performance optimization

================================================================================
TECHNICAL SPECIFICATIONS
================================================================================

PERFORMANCE METRICS:
- Search Response Time: < 1 second
- Cache Hit Rate: > 80%
- API Availability: 99.9%
- Concurrent Users: 1000+

SECURITY FEATURES:
- Input validation and sanitization
- Rate limiting on API endpoints
- Secure environment variable handling
- CORS configuration
- Error message sanitization

SCALABILITY CONSIDERATIONS:
- Horizontal scaling with load balancers
- Database sharding for large datasets
- CDN integration for static assets
- Microservices architecture
- Container orchestration (Kubernetes)

================================================================================
CONCLUSION
================================================================================

SnapChef represents a modern, AI-powered recipe search system that combines
cutting-edge technologies to deliver an exceptional user experience. The
project demonstrates the integration of:

- Real-time data processing with Pathway
- AI and machine learning with Hugging Face
- Modern web development with React and FastAPI
- Containerized deployment with Docker
- Scalable architecture with microservices

The system is designed for both immediate use and future expansion,
providing a solid foundation for advanced features like image recognition,
personalization, and mobile applications.

For technical support or questions, refer to the project documentation
or contact the development team.

================================================================================
Generated on: September 27, 2025
Project Version: 1.0.0
Documentation Version: 1.0
================================================================================
